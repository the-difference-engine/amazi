(function() {
  "use strict";

  angular.module("app").controller("mapCtrl", function($scope, $http, $q) {

    $scope.setUp = function() {
      $scope.open_now = false;
      $scope.markers = [];
      initMap();
      $scope.mapFilter = "";

      function geoLocation() {
        var deferred = $q.defer();
        $scope.map = {};
        if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
          $scope.mapCenter = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          $scope.map.setCenter($scope.mapCenter);
        }, function() {
            handleLocationError(true, $scope.map.getCenter());
          });
        } else {
          // Browser doesn't support Geolocation
          handleLocationError(false, $scope.map.getCenter());
        }
        deferred.resolve();
        return deferred.promise;
      };

      geoLocation().then( function(response){
        initMap().then( function(map) {
          $scope.map = map;
          google.maps.event.addListener($scope.map, 'zoom_changed', function() {
            $scope.bounds = $scope.map.getBounds();
            getLocations($scope.bounds);
          });
          google.maps.event.addListener($scope.map, 'dragend', function() {
            $scope.bounds = $scope.map.getBounds();
            getLocations($scope.bounds);
          });
        });
      });
    };

    function initMap() {
      var deferred = $q.defer();

      $scope.mapCenter = {
        lat: 39.7877,
        lng: -122.4048
      };
      var map = new google.maps.Map(document.getElementById('mapView'), {
        center: {lat: $scope.mapCenter.lat, lng: $scope.mapCenter.lng},
        zoom: 14,
        streetViewControl: false
      });
      deferred.resolve(map);
      return deferred.promise;
    };

    function getLocations(bounds) {
      var swLat  = bounds.getSouthWest().lat();
      var swLong = bounds.getSouthWest().lng();
      var neLat  = bounds.getNorthEast().lat();
      var neLong = bounds.getNorthEast().lng();
      $http.get('/api/v1/locations.json/?swLat=' + swLat + '&swLong=' + swLong + '&neLat=' + neLat + '&neLong=' + neLong + "&open_now=" + $scope.open_now + "&water_type=" + $scope.mapFilter).then(function(response) {
        $scope.locations = response.data;
        createMarkers($scope.locations);
      });
    };

    $scope.testDelete = function() {
        for (var i = 0; i < $scope.markers.length; i++) {
        $scope.markers[i].setMap(null)
      }
    }

    function createMarkers(locations) {
      for (var i = 0; i < $scope.markers.length; i++) {
        $scope.markers[i].setMap(null)
      }
      $scope.markers = []
      var infowindow = new google.maps.InfoWindow();
      google.maps.event.addListener($scope.map, "click", function(event) {
        infowindow.close();
      });
      var icons = {
        eco_alternative: {
          url: "<%= image_url("source-eco.svg") %>",
          size: new google.maps.Size(50, 50)
        },
        natural:{
          url: "<%= image_url("source-natural.svg") %>",
          size: new google.maps.Size(50, 50)
        },
        filtered: {
          url: "<%= image_url("source-filtered.svg") %>",
          size: new google.maps.Size(50, 50)
        },
        fountain: {
          url: "<%= image_url("source-fountain.svg") %>",
          size: new google.maps.Size(50, 50)
        },
      }
      locations.forEach(function(location) {
        var location_icon = {}
        location.water_types.forEach(function(location_water_type) {
          // filtered, fountain, eco-alternative, natural
          if (location_water_type.name == "filtered") {
            location_icon = icons["filtered"];
          } else if (location_water_type.name == "fountain" && location_icon != icons["filtered"]){
            location_icon = icons["fountain"];
          } else if (location_water_type.name == "eco-alternative" && location_icon != icons["filtered"] && location_icon != icons["fountain"]) {
            location_icon = icons["eco_alternative"];
          } else if (location_water_type.name == "natural" && location_icon != icons["filtered"] && location_icon != icons["fountain"] && location_icon != icons["eco_alternative"]) {
            location_icon = icons["natural"]
          }
        });
        $http.get("/api/v1/locations/" + location.id + "/place_name").then(function(response){
          var location_name = response.data["name"]
          var marker = new google.maps.Marker({
            position: {lat: location.latitude, lng: location.longitude},
            map: $scope.map,
            title: location.address,
            water_types: location.water_types,
            icon: location_icon
          });
          $scope.markers.push(marker)
          marker.addListener('click', function() {
            var content = "<a href=/locations/" + location.id + '>' + location_name + "</a>";
            infowindow.setContent(content);
            infowindow.open($scope.map, marker);
          });
        });
      });
    };

    var showing = [0, 0, 0, 0];

    $scope.filterByWaterType = function(type) {
      var waterType = parseInt(type);
      if (showing[waterType] === waterType) {
        showing[waterType] = 0;
      } else {
        showing[waterType] = waterType;
      }

      $scope.mapFilter = showing;

      getLocations($scope.bounds);
    };

    $scope.findCity = function(input) {
      $scope.place = input.replace(" ","_");
      $http.get("/api/v1/locations/search.json/?input=" + $scope.place).then(function(response) {

        $scope.searchBounds = response.data
        var searchLat  = $scope.searchBounds[0];
        var searchLng = $scope.searchBounds[1];

        $scope.mapCenter = {
          lat: searchLat,
          lng: searchLng
        };

        $scope.map.setCenter($scope.mapCenter);

        $scope.bounds = $scope.map.getBounds();
        getLocations($scope.bounds);

        // google.maps.removeEventListener($scope.map, 'center_changed', function() {
        //   $scope.bounds = $scope.map.getBounds();
        //   getLocations($scope.bounds);
        // });

      })
    };
    $scope.toggle_open_now = function() {
      $scope.open_now = !$scope.open_now;
      getLocations($scope.bounds);
    }

    window.$scope = $scope;
  });
})();